<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[ShareHub]]></title>
  <subtitle><![CDATA[悲观的意志,乐观的头脑]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://github.com/x-hansong//"/>
  <updated>2015-06-17T06:52:28.000Z</updated>
  <id>https://github.com/x-hansong//</id>
  
  <author>
    <name><![CDATA[Yonah-潇]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用hexo搭建github博客]]></title>
    <link href="https://github.com/x-hansong/2015/06/17/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/x-hansong/2015/06/17/用hexo搭建github博客/</id>
    <published>2015-06-17T02:14:18.000Z</published>
    <updated>2015-06-17T06:52:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p><strong>搭建环境:Linux,nodejs,npm,git</strong></p>
<p>现在网上已经有很多关于搭建hexo github博客的文章,我自己也是参考别人的文章过来的,但是现在hexo已经到了3.0版本,很多教程都过时了,而且感觉他们教程的思路着重于怎么做,并没有说明背后的原因,所以我希望写一篇着重于<strong>为什么</strong>,而不是怎么做的文章.我相信只有理解背后的原理才能更好更快的上手.</p>
<p>其次,最好的教程就是官方文档,所以在这篇文章我引用的都是官方文档的内容,而且只是提供思路,不提供详细步骤.因为版本更新之后,操作是不一样的,官方文档会随时更新,但是这篇文章不一定会随时更新,然而思路是不变的,所以我极力推荐大家首先阅读官方文档.</p>
<h2 id="什么是Github_Page">什么是Github Page</h2><p>首先,所谓的github博客是通过github page来实现的.</p>
<p>简单的说，Github是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。</p>
<p>但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。<br>他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。</p>
<p>因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。</p>
<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<h2 id="什么是Hexo">什么是Hexo</h2><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>我们主要是用hexo在本地写博客,然后上传到github page,就像你commit项目代码到github一样.</p>
<h1 id="操作">操作</h1><h2 id="建立一个Github_page">建立一个Github page</h2><p>首先注册个github账户,然后在本地配置ssh到github,这一步自行google.</p>
<blockquote>
<h2 id="Create_a_repository">Create a repository</h2><p>Head over to GitHub and create a new repository named username.github.io, where username is your username (or organization name) on GitHub.</p>
<p>If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right.</p>
</blockquote>
<p>官方教程主要强调命名项目的格式,即一定要命名为 username.github.io<br>同时,建完项目之后不要进行任何操作.我们可以直接用hexo初始化项目.</p>
<h2 id="安装配置hexo">安装配置hexo</h2><p>这一步强烈推荐看<a href="http://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo 官方文档</a>,现在很多网上的安装过程是过时的,现在hexo是3.0了.<br>请耐心的看完官方文档以下内容<br><img src="/2015/06/17/用hexo搭建github博客/00.png" alt="[官方文档目录]" title="[官方文档目录]">_</p>
<p>由于hexo3.0很多功能都插件化了,包括git上传,server功能.<br>所以我们要把博客上传到github就需要先装git插件,详细见官方文档-“部署”(切记要根据文档配置config.yml)<br>以下是常用插件</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-archive <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-category <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span>
</code></pre><p>在命令行执行即可</p>
<h2 id="用hexo写作github博客的流程">用hexo写作github博客的流程</h2><p><strong>注意:hexo是用markdown来写作的,以下命令都是博客所在目录执行</strong></p>
<ol>
<li>hexo new “title” <ul>
<li>新建一篇文章,然后编辑相应的md文件</li>
<li>具体使用查看官方文档-“写作”</li>
</ul>
</li>
<li>hexo clean <ul>
<li>清除缓存</li>
</ul>
</li>
<li>hexo generate<ul>
<li>根据写作的内容和配置生成网页</li>
<li>生成文章在public文件夹中,上传到github的就是里面的内容</li>
<li>具体使用查看官方文档-“生成器”</li>
</ul>
</li>
<li>hexo deploy <ul>
<li>上传到github</li>
<li>具体使用查看官方文档-“部署”</li>
</ul>
</li>
<li>访问username.github.io查看内容</li>
</ol>
<h2 id="hexo与github的关系">hexo与github的关系</h2><p>hexo是一个博客框架,给我们提供了基于markdown的语法,帮助我们自动生成博客.</p>
<p>由于github提供了github page的功能,那么我们可以把生成的博客网页放在github上,供大家访问.</p>
<p>也就是说github就像是一个网站空间,由于hexo自带对github的支持,可以直接commit内容到github上,也就是说我们可以把hexo当做集成了写作和ftp发布功能的软件.</p>
<h2 id="hexo的主题">hexo的主题</h2><p>hexo有丰富的主题支持,本博客用的就是<a href="http://wuchong.me/jacman/2014/11/20/how-to-use-jacman/" target="_blank" rel="external">jacman</a><br>更多主题查看官方文档.</p>
<h1 id="总结">总结</h1><p>整个部署流程如下</p>
<ul>
<li>注册github</li>
<li>创建username.github.io</li>
<li>安装配置hexo</li>
<li>开始写作</li>
<li>额外配置主题</li>
</ul>
<p>总的来说,刚开始配置就是一直在折腾,需要有足够的耐心,可能大家都喜欢看别人一步步的详细的步骤,自己只要复制粘贴就行了.但是有时候即使你完全照着做也会出问题的,因为版本和环境不一样.</p>
<p>一开始我也是这样,后来才发现,最好的方法是查看别人做的思路,然后去找官方的文档.这样遇到的问题会大大减少,有时候你纠结半天的问题可能只是版本不一样.就像前面deploy部署,所有文章都是没有提到要先装<br>    npm install hexo-deployer-git —save<br>因为hexo3.0把它插件化了,然后我在官方文档找到了答案.</p>
<p>仅以此文记录折腾hexo的过程,并且希望给后来者有参考价值.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p><strong>搭建环境:Linux,nodejs,npm,git</strong></p>
<p>现在网上已经有很多关于搭建hexo github博客的文章,我自己也是参考别人的文章过来的,但是现在hexo已经到了3.0版本,很多教程]]>
    </summary>
    
  </entry>
  
</feed>